# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ArdPlotGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
import pyqtgraph as pg
import serial
import serial.tools.list_ports
import sys
import random
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(598, 468)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.comboBox_ports = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_ports.setObjectName("comboBox_ports")
        self.verticalLayout.addWidget(self.comboBox_ports)
        self.pushButton_connect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_connect.setObjectName("pushButton_connect")
        self.verticalLayout.addWidget(self.pushButton_connect)
        self.widget = PlotWidget(self.centralwidget)
        self.widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.widget.setObjectName("widget")
        self.verticalLayout.addWidget(self.widget)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 598, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_connect.setText(_translate("MainWindow", "Conectar"))
from pyqtgraph import PlotWidget




# ---------- CLASE DEL HILO ----------
class SerialThread(QThread):
    # Señal que se emite cuando llega un nuevo dato (float)
    data_received = pyqtSignal(float)

    def __init__(self, port_name):
        super().__init__()
        self.port_name = port_name
        self.running = True  # Flag de control para parar el hilo

    def run(self):
        # Acá iría la conexión real al puerto serie:
        ser = serial.Serial(self.port_name, 9600, timeout=1)
        
        while self.running:
            # Simulación de datos: genera un número aleatorio
            #value = random.uniform(0, 10)
            # Si usas Arduino, descomentá:
            line = ser.readline().decode().strip()
            if line:
                try:
                    value = float(line)
                    self.data_received.emit(value) # Emite la señal con el valor recibido
                except ValueError:
                    pass
            
            # Espera 0.1 s → genera ~10 lecturas por segundo
            time.sleep(0.1)
        
        ser.close()

    def stop(self):
        self.running = False  # Cambia el flag
        self.quit()           # Pide al hilo que salga del loop
        self.wait()           # Espera a que termine ordenadamente


# ---------- CLASE PRINCIPAL ----------
class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.serial_thread = None  # Instancia del hilo
        self.data = []             # Lista para guardar los puntos
        self.max_points = 100      # Máximo de puntos en la gráfica

        self.pushButton_connect.clicked.connect(self.connect_serial)
        # Configurar la gráfica
        self.widget.plotItem.showGrid(True, True, 0.7)
        self.curve = self.widget.plot(pen='y')

        self.refresh_ports()

    def refresh_ports(self):
        ports = serial.tools.list_ports.comports()
        self.comboBox_ports.clear()
        for port in ports:
            self.comboBox_ports.addItem(port.device)

    def connect_serial(self):
        if self.serial_thread is None:
            port = self.comboBox_ports.currentText()
            if port:
                self.serial_thread = SerialThread(port)
                self.serial_thread.data_received.connect(self.update_plot)
                self.serial_thread.start()
                self.pushButton_connect.setText("Desconectar")
        else:
            self.serial_thread.stop()
            self.serial_thread = None
            self.pushButton_connect.setText("Conectar")

    def update_plot(self, value):
        self.data.append(value)
        if len(self.data) > self.max_points:
            self.data = self.data[-self.max_points:]
        self.curve.setData(self.data)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())




# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
